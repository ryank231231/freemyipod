//
//
//    Copyright 2010 TheSeven
//
//
//    This file is part of emCORE.
//
//    emCORE is free software: you can redistribute it and/or
//    modify it under the terms of the GNU General Public License as
//    published by the Free Software Foundation, either version 2 of the
//    License, or (at your option) any later version.
//
//    emCORE is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//    See the GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along
//    with emCORE.  If not, see <http://www.gnu.org/licenses/>.
//
//


#ifndef __SYSCALLWRAPPERS_H__
#define __SYSCALLWRAPPERS_H__


#define IN_APPLICATION_CODE
#include "syscallapi.h"


extern struct emcore_syscall_table* __emcore_syscall;


#define panic(args...) __emcore_syscall->panic(args)
#define panicf(args...) __emcore_syscall->panicf(args)
#define cprintf(args...) __emcore_syscall->cprintf(args)
#define cvprintf(args...) __emcore_syscall->cvprintf(args)
#define cputc(args...) __emcore_syscall->cputc(args)
#define cputs(args...) __emcore_syscall->cputs(args)
#define cwrite(args...) __emcore_syscall->cwrite(args)
#define cflush(args...) __emcore_syscall->cflush(args)
#define cgetc(args...) __emcore_syscall->cgetc(args)
#define cread(args...) __emcore_syscall->cread(args)
#define creada(args...) __emcore_syscall->creada(args)
#define opendir(args...) __emcore_syscall->opendir(args)
#define closedir(args...) __emcore_syscall->closedir(args)
#define readdir(args...) __emcore_syscall->readdir(args)
#define mkdir(args...) __emcore_syscall->mkdir(args)
#define rmdir(args...) __emcore_syscall->rmdir(args)
#define renderbmp(args...) __emcore_syscall->renderbmp(args)
#define renderchar(args...) __emcore_syscall->renderchar(args)
#define rendertext(args...) __emcore_syscall->rendertext(args)
#define renderfillrect(args...) __emcore_syscall->renderfillrect(args)
#define get_font_width(args...) __emcore_syscall->get_font_width(args)
#define get_font_height(args...) __emcore_syscall->get_font_height(args)
#define execimage(args...) __emcore_syscall->execimage(args)
#define ftruncate(args...) __emcore_syscall->ftruncate(args)
#define fsync(args...) __emcore_syscall->fsync(args)
#define close(args...) __emcore_syscall->close(args)
#define write(args...) __emcore_syscall->write(args)
#define read(args...) __emcore_syscall->read(args)
#define lseek(args...) __emcore_syscall->lseek(args)
#define remove(args...) __emcore_syscall->remove(args)
#define file_open(args...) __emcore_syscall->file_open(args)
#define rename(args...) __emcore_syscall->rename(args)
#define file_creat(args...) __emcore_syscall->file_creat(args)
#define filesize(args...) __emcore_syscall->filesize(args)
#define format(args...) __emcore_syscall->format(args)
#define vuprintf(args...) __emcore_syscall->vuprintf(args)
#define lcdconsole_putc_noblit(args...) __emcore_syscall->lcdconsole_putc_noblit(args)
#define lcdconsole_puts_noblit(args...) __emcore_syscall->lcdconsole_puts_noblit(args)
#define lcdconsole_write_noblit(args...) __emcore_syscall->lcdconsole_write_noblit(args)
#define lcdconsole_update(args...) __emcore_syscall->lcdconsole_update(args)
#define lcdconsole_putc(args...) __emcore_syscall->lcdconsole_putc(args)
#define lcdconsole_puts(args...) __emcore_syscall->lcdconsole_puts(args)
#define lcdconsole_write(args...) __emcore_syscall->lcdconsole_write(args)
#define lcdconsole_get_current_x(args...) __emcore_syscall->lcdconsole_get_current_x(args)
#define lcdconsole_get_current_y(args...) __emcore_syscall->lcdconsole_get_current_y(args)
#define lcdconsole_get_lineend_x(args...) __emcore_syscall->lcdconsole_get_lineend_x(args)
#define lcdconsole_get_lineend_y(args...) __emcore_syscall->lcdconsole_get_lineend_y(args)
#define lcdconsole_progressbar(args...) __emcore_syscall->lcdconsole_progressbar(args)
#define progressbar_init(args...) __emcore_syscall->progressbar_init(args)
#define progressbar_setpos(args...) __emcore_syscall->progressbar_setpos(args)
#define shutdown(args...) __emcore_syscall->shutdown(args)
#define storage_read_sectors_md(args...) __emcore_syscall->storage_read_sectors_md(args)
#define storage_write_sectors_md(args...) __emcore_syscall->storage_write_sectors_md(args)
#define storage_get_info(args...) __emcore_syscall->storage_get_info(args)
#define strcasecmp(args...) __emcore_syscall->strcasecmp(args)
#define strncasecmp(args...) __emcore_syscall->strncasecmp(args)
#define strcasestr(args...) __emcore_syscall->strcasestr(args)
#define strlcat(args...) __emcore_syscall->strlcat(args)
#define strlcpy(args...) __emcore_syscall->strlcpy(args)
#define mutex_init(args...) __emcore_syscall->mutex_init(args)
#define mutex_lock(args...) __emcore_syscall->mutex_lock(args)
#define mutex_unlock(args...) __emcore_syscall->mutex_unlock(args)
#define wakeup_init(args...) __emcore_syscall->wakeup_init(args)
#define wakeup_wait(args...) __emcore_syscall->wakeup_wait(args)
#define wakeup_signal(args...) __emcore_syscall->wakeup_signal(args)
#define sleep(args...) __emcore_syscall->sleep(args)
#define thread_create(args...) __emcore_syscall->thread_create(args)
#define thread_exit(args...) __emcore_syscall->thread_exit(args)
#define thread_suspend(args...) __emcore_syscall->thread_suspend(args)
#define thread_resume(args...) __emcore_syscall->thread_resume(args)
#define thread_terminate(args...) __emcore_syscall->thread_terminate(args)
#define __errno(args...) __emcore_syscall->__errno(args)
#define ucl_decompress(args...) __emcore_syscall->ucl_decompress(args)
#define bootflash_filesize(args...) __emcore_syscall->bootflash_filesize(args)
#define bootflash_attributes(args...) __emcore_syscall->bootflash_attributes(args)
#define bootflash_getaddr(args...) __emcore_syscall->bootflash_getaddr(args)
#define bootflash_read(args...) __emcore_syscall->bootflash_read(args)
#define bootflash_readraw(args...) __emcore_syscall->bootflash_readraw(args)
#define bootflash_writeraw(args...) __emcore_syscall->bootflash_writeraw(args)
#define bootflash_getrawaddr(args...) __emcore_syscall->bootflash_getrawaddr(args)
#define bootflash_is_memmapped(args...) __emcore_syscall->bootflash_is_memmapped(args)
#define read_native_timer(args...) __emcore_syscall->read_native_timer(args)
#define read_usec_timer(args...) __emcore_syscall->read_usec_timer(args)
#define i2c_send(args...) __emcore_syscall->i2c_send(args)
#define i2c_recv(args...) __emcore_syscall->i2c_recv(args)
#define i2c_sendbyte(args...) __emcore_syscall->i2c_sendbyte(args)
#define i2c_recvbyte(args...) __emcore_syscall->i2c_recvbyte(args)
#define interrupt_enable(args...) __emcore_syscall->interrupt_enable(args)
#define interrupt_set_handler(args...) __emcore_syscall->interrupt_set_handler(args)
#define int_timer_set_handler(args...) __emcore_syscall->int_timer_set_handler(args)
#define displaylcd(args...) __emcore_syscall->displaylcd(args)
#define displaylcd_sync(args...) __emcore_syscall->displaylcd_sync(args)
#define displaylcd_busy(args...) __emcore_syscall->displaylcd_busy(args)
#define displaylcd_safe(args...) __emcore_syscall->displaylcd_safe(args)
#define lcd_get_width(args...) __emcore_syscall->lcd_get_width(args)
#define lcd_get_height(args...) __emcore_syscall->lcd_get_height(args)
#define lcd_get_bytes_per_pixel(args...) __emcore_syscall->lcd_get_bytes_per_pixel(args)
#define lcd_translate_color(args...) __emcore_syscall->lcd_translate_color(args)
#define clean_dcache(args...) __emcore_syscall->clean_dcache(args)
#define invalidate_dcache(args...) __emcore_syscall->invalidate_dcache(args)
#define invalidate_icache(args...) __emcore_syscall->invalidate_icache(args)
#define power_off(args...) __emcore_syscall->power_off(args)
#define charging_state(args...) __emcore_syscall->charging_state(args)
#define atoi(args...) __emcore_syscall->atoi(args)
#define memchr(args...) __emcore_syscall->memchr(args)
#define memcmp(args...) __emcore_syscall->memcmp(args)
#define memcpy(args...) __emcore_syscall->memcpy(args)
#define memmove(args...) __emcore_syscall->memmove(args)
#define memset(args...) __emcore_syscall->memset(args)
#define qsort(args...) __emcore_syscall->qsort(args)
#define srand(args...) __emcore_syscall->srand(args)
#define rand(args...) __emcore_syscall->rand(args)
#define snprintf(args...) __emcore_syscall->snprintf(args)
#define vsnprintf(args...) __emcore_syscall->vsnprintf(args)
#define isspace(args...) __emcore_syscall->isspace(args)
#define isdigit(args...) __emcore_syscall->isdigit(args)
#define isxdigit(args...) __emcore_syscall->isxdigit(args)
#define sscanf(args...) __emcore_syscall->sscanf(args)
#define strcat(args...) __emcore_syscall->strcat(args)
#define strchr(args...) __emcore_syscall->strchr(args)
#define strcmp(args...) __emcore_syscall->strcmp(args)
#define strcpy(args...) __emcore_syscall->strcpy(args)
#define strlen(args...) __emcore_syscall->strlen(args)
#define strncmp(args...) __emcore_syscall->strncmp(args)
#define strrchr(args...) __emcore_syscall->strrchr(args)
#define strstr(args...) __emcore_syscall->strstr(args)
#define strtok_r(args...) __emcore_syscall->strtok_r(args)
#define backlight_on(args...) __emcore_syscall->backlight_on(args)
#define backlight_set_fade(args...) __emcore_syscall->backlight_set_fade(args)
#define backlight_set_brightness(args...) __emcore_syscall->backlight_set_brightness(args)
#define get_platform_id(args...) __emcore_syscall->get_platform_id(args)
#define tlsf_create(args...) __emcore_syscall->tlsf_create(args)
#define tlsf_destroy(args...) __emcore_syscall->tlsf_destroy(args)
#define tlsf_malloc(args...) __emcore_syscall->tlsf_malloc(args)
#define tlsf_memalign(args...) __emcore_syscall->tlsf_memalign(args)
#define tlsf_realloc(args...) __emcore_syscall->tlsf_realloc(args)
#define tlsf_free(args...) __emcore_syscall->tlsf_free(args)
#define tlsf_walk_heap(args...) __emcore_syscall->tlsf_walk_heap(args)
#define tlsf_check_heap(args...) __emcore_syscall->tlsf_check_heap(args)
#define tlsf_block_size(args...) __emcore_syscall->tlsf_block_size(args)
#define tlsf_overhead(args...) __emcore_syscall->tlsf_overhead(args)
#define execfirmware(args...) __emcore_syscall->execfirmware(args)
#define button_register_handler(args...) __emcore_syscall->button_register_handler(args)
#define button_unregister_handler(args...) __emcore_syscall->button_unregister_handler(args)
#define clickwheel_get_state(args...) __emcore_syscall->clickwheel_get_state(args)
#define clockgate_enable(args...) __emcore_syscall->clockgate_enable(args)
#define context_switch(args...) __emcore_syscall->context_switch(args)
#define disk_mount(args...) __emcore_syscall->disk_mount(args)
#define disk_unmount(args...) __emcore_syscall->disk_unmount(args)
#define hwkeyaes(args...) __emcore_syscall->hwkeyaes(args)
#define hmacsha1(args...) __emcore_syscall->hmacsha1(args)
#define reset(args...) __emcore_syscall->reset(args)
#define int_dma_set_handler(args...) __emcore_syscall->int_dma_set_handler(args)


#endif
